2018-05-13 23:44:35 INFO Connected to server
2018-05-13 23:44:35 INFO Persistent client received:
{
  "jsonrpc": "2.0",
  "id": 0,
  "method": "initialize",
  "params": {
    "processId": 46221,
    "rootPath": "/Users/kyryu/code/dts/dts",
    "rootUri": "file:///Users/kyryu/code/dts/dts",
    "capabilities": {
      "workspace": {
        "applyEdit": true,
        "didChangeConfiguration": { "dynamicRegistration": true },
        "didChangeWatchedFiles": { "dynamicRegistration": true },
        "symbol": { "dynamicRegistration": true },
        "executeCommand": { "dynamicRegistration": true },
        "workspaceFolders": true,
        "configuration": true
      },
      "textDocument": {
        "synchronization": {
          "dynamicRegistration": true,
          "willSave": true,
          "willSaveWaitUntil": true,
          "didSave": true
        },
        "completion": {
          "dynamicRegistration": true,
          "completionItem": {
            "snippetSupport": true,
            "commitCharactersSupport": true
          }
        },
        "hover": { "dynamicRegistration": true },
        "signatureHelp": { "dynamicRegistration": true },
        "definition": { "dynamicRegistration": true },
        "references": { "dynamicRegistration": true },
        "documentHighlight": { "dynamicRegistration": true },
        "documentSymbol": { "dynamicRegistration": true },
        "codeAction": { "dynamicRegistration": true },
        "codeLens": { "dynamicRegistration": true },
        "formatting": { "dynamicRegistration": true },
        "rangeFormatting": { "dynamicRegistration": true },
        "onTypeFormatting": { "dynamicRegistration": true },
        "rename": { "dynamicRegistration": true },
        "documentLink": { "dynamicRegistration": true }
      }
    },
    "trace": "off",
    "workspaceFolders": [
      { "uri": "file:///Users/kyryu/code/dts/dts", "name": "dts" }
    ]
  }
}

2018-05-13 23:44:35 INFO Request method: initialize
2018-05-13 23:44:35 INFO Persistent client sends:
{
  "jsonrpc": "2.0",
  "id": 0,
  "result": {
    "capabilities": {
      "textDocumentSync": { "openClose": true, "change": 0 },
      "hoverProvider": false,
      "definitionProvider": true,
      "rageProvider": true
    }
  }
}

2018-05-13 23:44:35 INFO Persistent client received:
{ "jsonrpc": "2.0", "method": "initialized", "params": {} }

2018-05-13 23:44:35 INFO Persistent client sends:
{
  "jsonrpc": "2.0",
  "method": "textDocument/publishDiagnostics",
  "params": {
    "uri": "file:///Users/kyryu/code/dts/dts/seq.py",
    "diagnostics": [
      {
        "range": {
          "start": { "line": 16, "character": 10 },
          "end": { "line": 16, "character": 16 }
        },
        "severity": 1,
        "source": "Pyre",
        "message":
          "Incompatible return type [7]: Expected `str` but got `None`. Type `str` expected on line 17, specified on line 10."
      }
    ]
  }
}

2018-05-13 23:44:38 INFO Persistent client received:
{
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///Users/kyryu/code/dts/dts/seq.py",
      "languageId": "python",
      "version": 1,
      "text":
        "from dateutil.parser import parse\nfrom datetime import timedelta, datetime\n\nDT_UNIT = ['h', 'd', 'w']\nDTS_DEFAULT_UNIT = 'd'\nDTS_DEFAULT_INTERVAL = 1\nDTS_DEFAULT_FORMAT = '%Y%m%d'\n\n# generator\ndef _seqGen(first, last, t_delta, t_fmt) -> str:\n    dt = first\n    last_dt = last + t_delta\n    while last_dt > dt:\n        yield dt.strftime(t_fmt)\n        dt = dt + t_delta\n        if dt > last:\n          return\n\n# wrapper\ndef seqGen(first, last, unit='d', how_long=1, fmt='%Y%m%d'):\n  if unit not in DT_UNIT:\n    raise ValueError(\"Incorrect unit. It should be 'h', 'd', or 'w'\")\n\n  try:\n    datetime.strptime(first.strftime(fmt), fmt)\n  except ValueError:\n    raise ValueError(\"Incorrect format string.\")\n\n  td = { 'h': (timedelta(hours=how_long), '%Y%m%d-%H'),\n       'd': (timedelta(days=how_long),  '%Y%m%d'),\n       'w': (timedelta(weeks=how_long), '%Y%m%d') }\n\n  return _seqGen(first, last, td[unit][0], fmt if fmt is not None else td[unit][1])\n"
    }
  }
}

2018-05-13 23:44:38 INFO Persistent client received:
{
  "jsonrpc": "2.0",
  "method": "$/setTraceNotification",
  "params": { "value": "off" }
}

2018-05-13 23:45:14 INFO Persistent client received:
{
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": { "uri": "file:///Users/kyryu/code/dts/dts/seq.py" }
  }
}

2018-05-13 23:45:15 INFO Persistent client received:
{
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///Users/kyryu/code/dts/dts/seq.py",
      "languageId": "python",
      "version": 1,
      "text":
        "from dateutil.parser import parse\nfrom datetime import timedelta, datetime\n\nDT_UNIT = ['h', 'd', 'w']\nDTS_DEFAULT_UNIT = 'd'\nDTS_DEFAULT_INTERVAL = 1\nDTS_DEFAULT_FORMAT = '%Y%m%d'\n\n# generator\ndef _seqGen(first, last, t_delta, t_fmt) -> str:\n    dt = first\n    last_dt = last + t_delta\n    while last_dt > dt:\n        yield dt.strftime(t_fmt)\n        dt = dt + t_delta\n        if dt > last:\n          break\n\n# wrapper\ndef seqGen(first, last, unit='d', how_long=1, fmt='%Y%m%d'):\n  if unit not in DT_UNIT:\n    raise ValueError(\"Incorrect unit. It should be 'h', 'd', or 'w'\")\n\n  try:\n    datetime.strptime(first.strftime(fmt), fmt)\n  except ValueError:\n    raise ValueError(\"Incorrect format string.\")\n\n  td = { 'h': (timedelta(hours=how_long), '%Y%m%d-%H'),\n       'd': (timedelta(days=how_long),  '%Y%m%d'),\n       'w': (timedelta(weeks=how_long), '%Y%m%d') }\n\n  return _seqGen(first, last, td[unit][0], fmt if fmt is not None else td[unit][1])\n"
    }
  }
}

2018-05-13 23:49:48 INFO Persistent client received:
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "textDocument/definition",
  "params": {
    "textDocument": { "uri": "file:///Users/kyryu/code/dts/dts/seq.py" },
    "position": { "line": 16, "character": 11 }
  }
}

2018-05-13 23:49:48 INFO Persistent client sends:
{ "jsonrpc": "2.0", "id": 1, "result": [] }

2018-05-13 23:49:48 INFO Persistent client received:
{
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": { "uri": "file:///Users/kyryu/code/dts/dts/seq.py" }
  }
}

2018-05-13 23:49:50 INFO Persistent client received:
{
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///Users/kyryu/code/dts/dts/seq.py",
      "languageId": "python",
      "version": 1,
      "text":
        "from dateutil.parser import parse\nfrom datetime import timedelta, datetime\n\nDT_UNIT = ['h', 'd', 'w']\nDTS_DEFAULT_UNIT = 'd'\nDTS_DEFAULT_INTERVAL = 1\nDTS_DEFAULT_FORMAT = '%Y%m%d'\n\n# generator\ndef _seqGen(first, last, t_delta, t_fmt) -> str:\n    dt = first\n    last_dt = last + t_delta\n    while last_dt > dt:\n        yield dt.strftime(t_fmt)\n        dt = dt + t_delta\n        if dt > last:\n          return # has type `Any`, which is a subtype of `str`\n\n# wrapper\ndef seqGen(first, last, unit='d', how_long=1, fmt='%Y%m%d') -> str:\n  if unit not in DT_UNIT:\n    raise ValueError(\"Incorrect unit. It should be 'h', 'd', or 'w'\")\n\n  try:\n    datetime.strptime(first.strftime(fmt), fmt)\n  except ValueError:\n    raise ValueError(\"Incorrect format string.\")\n\n  td = { 'h': (timedelta(hours=how_long), '%Y%m%d-%H'),\n       'd': (timedelta(days=how_long),  '%Y%m%d'),\n       'w': (timedelta(weeks=how_long), '%Y%m%d') }\n\n  return _seqGen(first, last, td[unit][0], fmt if fmt is not None else td[unit][1])\n"
    }
  }
}

2018-05-13 23:52:35 INFO Persistent client received:
{
  "jsonrpc": "2.0",
  "id": 2,
  "method": "textDocument/definition",
  "params": {
    "textDocument": { "uri": "file:///Users/kyryu/code/dts/dts/seq.py" },
    "position": { "line": 21, "character": 48 }
  }
}

2018-05-13 23:52:35 INFO Persistent client sends:
{ "jsonrpc": "2.0", "id": 2, "result": [] }

2018-05-13 23:56:00 INFO Persistent client received:
{
  "jsonrpc": "2.0",
  "id": 3,
  "method": "textDocument/definition",
  "params": {
    "textDocument": { "uri": "file:///Users/kyryu/code/dts/dts/seq.py" },
    "position": { "line": 9, "character": 36 }
  }
}

2018-05-13 23:56:00 INFO Persistent client sends:
{ "jsonrpc": "2.0", "id": 3, "result": [] }

2018-05-13 23:56:00 INFO Persistent client received:
{
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri":
        "file:///usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/datetime.py",
      "languageId": "python",
      "version": 1,
      "text":
        "\"\"\"Concrete date/time and related types.\n\nSee http://www.iana.org/time-zones/repository/tz-link.html for\ntime zone and DST data sources.\n\"\"\"\n\nimport time as _time\nimport math as _math\n\ndef _cmp(x, y):\n    return 0 if x == y else 1 if x > y else -1\n\nMINYEAR = 1\nMAXYEAR = 9999\n_MAXORDINAL = 3652059  # date.max.toordinal()\n\n# Utility functions, adapted from Python's Demo/classes/Dates.py, which\n# also assumes the current Gregorian calendar indefinitely extended in\n# both directions.  Difference:  Dates.py calls January 1 of year 0 day\n# number 1.  The code here calls January 1 of year 1 day number 1.  This is\n# to match the definition of the \"proleptic Gregorian\" calendar in Dershowitz\n# and Reingold's \"Calendrical Calculations\", where it's the base calendar\n# for all computations.  See the book for algorithms for converting between\n# proleptic Gregorian ordinals and many other calendar systems.\n\n# -1 is a placeholder for indexing purposes.\n_DAYS_IN_MONTH = [-1, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n_DAYS_BEFORE_MONTH = [-1]  # -1 is a placeholder for indexing purposes.\ndbm = 0\nfor dim in _DAYS_IN_MONTH[1:]:\n    _DAYS_BEFORE_MONTH.append(dbm)\n    dbm += dim\ndel dbm, dim\n\ndef _is_leap(year):\n    \"year -> 1 if leap year, else 0.\"\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n\ndef _days_before_year(year):\n    \"year -> number of days before January 1st of year.\"\n    y = year - 1\n    return y*365 + y//4 - y//100 + y//400\n\ndef _days_in_month(year, month):\n    \"year, month -> number of days in that month in that year.\"\n    assert 1 <= month <= 12, month\n    if month == 2 and _is_leap(year):\n        return 29\n    return _DAYS_IN_MONTH[month]\n\ndef _days_before_month(year, month):\n    \"year, month -> number of days in year preceding first day of month.\"\n    assert 1 <= month <= 12, 'month must be in 1..12'\n    return _DAYS_BEFORE_MONTH[month] + (month > 2 and _is_leap(year))\n\ndef _ymd2ord(year, month, day):\n    \"year, month, day -> ordinal, considering 01-Jan-0001 as day 1.\"\n    assert 1 <= month <= 12, 'month must be in 1..12'\n    dim = _days_in_month(year, month)\n    assert 1 <= day <= dim, ('day must be in 1..%d' % dim)\n    return (_days_before_year(year) +\n            _days_before_month(year, month) +\n            day)\n\n_DI400Y = _days_before_year(401)    # number of days in 400 years\n_DI100Y = _days_before_year(101)    #    \"    \"   \"   \" 100   \"\n_DI4Y   = _days_before_year(5)      #    \"    \"   \"   \"   4   \"\n\n# A 4-year cycle has an extra leap day over what we'd get from pasting\n# together 4 single years.\nassert _DI4Y == 4 * 365 + 1\n\n# Similarly, a 400-year cycle has an extra leap day over what we'd get from\n# pasting together 4 100-year cycles.\nassert _DI400Y == 4 * _DI100Y + 1\n\n# OTOH, a 100-year cycle has one fewer leap day than we'd get from\n# pasting together 25 4-year cycles.\nassert _DI100Y == 25 * _DI4Y - 1\n\ndef _ord2ymd(n):\n    \"ordinal -> (year, month, day), considering 01-Jan-0001 as day 1.\"\n\n    # n is a 1-based index, starting at 1-Jan-1.  The pattern of leap years\n    # repeats exactly every 400 years.  The basic strategy is to find the\n    # closest 400-year boundary at or before n, then work with the offset\n    # from that boundary to n.  Life is much clearer if we subtract 1 from\n    # n first -- then the values of n at 400-year boundaries are exactly\n    # those divisible by _DI400Y:\n    #\n    #     D  M   Y            n              n-1\n    #     -- --- ----        ----------     ----------------\n    #     31 Dec -400        -_DI400Y       -_DI400Y -1\n    #      1 Jan -399         -_DI400Y +1   -_DI400Y      400-year boundary\n    #     ...\n    #     30 Dec  000        -1             -2\n    #     31 Dec  000         0             -1\n    #      1 Jan  001         1              0            400-year boundary\n    #      2 Jan  001         2              1\n    #      3 Jan  001         3              2\n    #     ...\n    #     31 Dec  400         _DI400Y        _DI400Y -1\n    #      1 Jan  401         _DI400Y +1     _DI400Y      400-year boundary\n    n -= 1\n    n400, n = divmod(n, _DI400Y)\n    year = n400 * 400 + 1   # ..., -399, 1, 401, ...\n\n    # Now n is the (non-negative) offset, in days, from January 1 of year, to\n    # the desired date.  Now compute how many 100-year cycles precede n.\n    # Note that it's possible for n100 to equal 4!  In that case 4 full\n    # 100-year cycles precede the desired day, which implies the desired\n    # day is December 31 at the end of a 400-year cycle.\n    n100, n = divmod(n, _DI100Y)\n\n    # Now compute how many 4-year cycles precede it.\n    n4, n = divmod(n, _DI4Y)\n\n    # And now how many single years.  Again n1 can be 4, and again meaning\n    # that the desired day is December 31 at the end of the 4-year cycle.\n    n1, n = divmod(n, 365)\n\n    year += n100 * 100 + n4 * 4 + n1\n    if n1 == 4 or n100 == 4:\n        assert n == 0\n        return year-1, 12, 31\n\n    # Now the year is correct, and n is the offset from January 1.  We find\n    # the month via an estimate that's either exact or one too large.\n    leapyear = n1 == 3 and (n4 != 24 or n100 == 3)\n    assert leapyear == _is_leap(year)\n    month = (n + 50) >> 5\n    preceding = _DAYS_BEFORE_MONTH[month] + (month > 2 and leapyear)\n    if preceding > n:  # estimate is too large\n        month -= 1\n        preceding -= _DAYS_IN_MONTH[month] + (month == 2 and leapyear)\n    n -= preceding\n    assert 0 <= n < _days_in_month(year, month)\n\n    # Now the year and month are correct, and n is the offset from the\n    # start of that month:  we're done!\n    return year, month, n+1\n\n# Month and day names.  For localized versions, see the calendar module.\n_MONTHNAMES = [None, \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                     \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n_DAYNAMES = [None, \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n\n\ndef _build_struct_time(y, m, d, hh, mm, ss, dstflag):\n    wday = (_ymd2ord(y, m, d) + 6) % 7\n    dnum = _days_before_month(y, m) + d\n    return _time.struct_time((y, m, d, hh, mm, ss, wday, dnum, dstflag))\n\ndef _format_time(hh, mm, ss, us, timespec='auto'):\n    specs = {\n        'hours': '{:02d}',\n        'minutes': '{:02d}:{:02d}',\n        'seconds': '{:02d}:{:02d}:{:02d}',\n        'milliseconds': '{:02d}:{:02d}:{:02d}.{:03d}',\n        'microseconds': '{:02d}:{:02d}:{:02d}.{:06d}'\n    }\n\n    if timespec == 'auto':\n        # Skip trailing microseconds when us==0.\n        timespec = 'microseconds' if us else 'seconds'\n    elif timespec == 'milliseconds':\n        us //= 1000\n    try:\n        fmt = specs[timespec]\n    except KeyError:\n        raise ValueError('Unknown timespec value')\n    else:\n        return fmt.format(hh, mm, ss, us)\n\n# Correctly substitute for %z and %Z escapes in strftime formats.\ndef _wrap_strftime(object, format, timetuple):\n    # Don't call utcoffset() or tzname() unless actually needed.\n    freplace = None  # the string to use for %f\n    zreplace = None  # the string to use for %z\n    Zreplace = None  # the string to use for %Z\n\n    # Scan format for %z and %Z escapes, replacing as needed.\n    newformat = []\n    push = newformat.append\n    i, n = 0, len(format)\n    while i < n:\n        ch = format[i]\n        i += 1\n        if ch == '%':\n            if i < n:\n                ch = format[i]\n                i += 1\n                if ch == 'f':\n                    if freplace is None:\n                        freplace = '%06d' % getattr(object,\n                                                    'microsecond', 0)\n                    newformat.append(freplace)\n                elif ch == 'z':\n                    if zreplace is None:\n                        zreplace = \"\"\n                        if hasattr(object, \"utcoffset\"):\n                            offset = object.utcoffset()\n                            if offset is not None:\n                                sign = '+'\n                                if offset.days < 0:\n                                    offset = -offset\n                                    sign = '-'\n                                h, m = divmod(offset, timedelta(hours=1))\n                                assert not m % timedelta(minutes=1), \"whole minute\"\n                                m //= timedelta(minutes=1)\n                                zreplace = '%c%02d%02d' % (sign, h, m)\n                    assert '%' not in zreplace\n                    newformat.append(zreplace)\n                elif ch == 'Z':\n                    if Zreplace is None:\n                        Zreplace = \"\"\n                        if hasattr(object, \"tzname\"):\n                            s = object.tzname()\n                            if s is not None:\n                                # strftime is going to have at this: escape %\n                                Zreplace = s.replace('%', '%%')\n                    newformat.append(Zreplace)\n                else:\n                    push('%')\n                    push(ch)\n            else:\n                push('%')\n        else:\n            push(ch)\n    newformat = \"\".join(newformat)\n    return _time.strftime(newformat, timetuple)\n\n# Just raise TypeError if the arg isn't None or a string.\ndef _check_tzname(name):\n    if name is not None and not isinstance(name, str):\n        raise TypeError(\"tzinfo.tzname() must return None or string, \"\n                        \"not '%s'\" % type(name))\n\n# name is the offset-producing method, \"utcoffset\" or \"dst\".\n# offset is what it returned.\n# If offset isn't None or timedelta, raises TypeError.\n# If offset is None, returns None.\n# Else offset is checked for being in range, and a whole # of minutes.\n# If it is, its integer value is returned.  Else ValueError is raised.\ndef _check_utc_offset(name, offset):\n    assert name in (\"utcoffset\", \"dst\")\n    if offset is None:\n        return\n    if not isinstance(offset, timedelta):\n        raise TypeError(\"tzinfo.%s() must return None \"\n                        \"or timedelta, not '%s'\" % (name, type(offset)))\n    if offset.microseconds:\n        raise ValueError(\"tzinfo.%s() must return a whole number \"\n                         \"of seconds, got %s\" % (name, offset))\n    if not -timedelta(1) < offset < timedelta(1):\n        raise ValueError(\"%s()=%s, must be strictly between \"\n                         \"-timedelta(hours=24) and timedelta(hours=24)\" %\n                         (name, offset))\n\ndef _check_int_field(value):\n    if isinstance(value, int):\n        return value\n    if not isinstance(value, float):\n        try:\n            value = value.__int__()\n        except AttributeError:\n            pass\n        else:\n            if isinstance(value, int):\n                return value\n            raise TypeError('__int__ returned non-int (type %s)' %\n                            type(value).__name__)\n        raise TypeError('an integer is required (got type %s)' %\n                        type(value).__name__)\n    raise TypeError('integer argument expected, got float')\n\ndef _check_date_fields(year, month, day):\n    year = _check_int_field(year)\n    month = _check_int_field(month)\n    day = _check_int_field(day)\n    if not MINYEAR <= year <= MAXYEAR:\n        raise ValueError('year must be in %d..%d' % (MINYEAR, MAXYEAR), year)\n    if not 1 <= month <= 12:\n        raise ValueError('month must be in 1..12', month)\n    dim = _days_in_month(year, month)\n    if not 1 <= day <= dim:\n        raise ValueError('day must be in 1..%d' % dim, day)\n    return year, month, day\n\ndef _check_time_fields(hour, minute, second, microsecond, fold):\n    hour = _check_int_field(hour)\n    minute = _check_int_field(minute)\n    second = _check_int_field(second)\n    microsecond = _check_int_field(microsecond)\n    if not 0 <= hour <= 23:\n        raise ValueError('hour must be in 0..23', hour)\n    if not 0 <= minute <= 59:\n        raise ValueError('minute must be in 0..59', minute)\n    if not 0 <= second <= 59:\n        raise ValueError('second must be in 0..59', second)\n    if not 0 <= microsecond <= 999999:\n        raise ValueError('microsecond must be in 0..999999', microsecond)\n    if fold not in (0, 1):\n        raise ValueError('fold must be either 0 or 1', fold)\n    return hour, minute, second, microsecond, fold\n\ndef _check_tzinfo_arg(tz):\n    if tz is not None and not isinstance(tz, tzinfo):\n        raise TypeError(\"tzinfo argument must be None or of a tzinfo subclass\")\n\ndef _cmperror(x, y):\n    raise TypeError(\"can't compare '%s' to '%s'\" % (\n                    type(x).__name__, type(y).__name__))\n\ndef _divide_and_round(a, b):\n    \"\"\"divide a by b and round result to the nearest integer\n\n    When the ratio is exactly half-way between two integers,\n    the even integer is returned.\n    \"\"\"\n    # Based on the reference implementation for divmod_near\n    # in Objects/longobject.c.\n    q, r = divmod(a, b)\n    # round up if either r / b > 0.5, or r / b == 0.5 and q is odd.\n    # The expression r / b > 0.5 is equivalent to 2 * r > b if b is\n    # positive, 2 * r < b if b negative.\n    r *= 2\n    greater_than_half = r > b if b > 0 else r < b\n    if greater_than_half or r == b and q % 2 == 1:\n        q += 1\n\n    return q\n\n\nclass timedelta:\n    \"\"\"Represent the difference between two datetime objects.\n\n    Supported operators:\n\n    - add, subtract timedelta\n    - unary plus, minus, abs\n    - compare to timedelta\n    - multiply, divide by int\n\n    In addition, datetime supports subtraction of two datetime objects\n    returning a timedelta, and addition or subtraction of a datetime\n    and a timedelta giving a datetime.\n\n    Representation: (days, seconds, microseconds).  Why?  Because I\n    felt like it.\n    \"\"\"\n    __slots__ = '_days', '_seconds', '_microseconds', '_hashcode'\n\n    def __new__(cls, days=0, seconds=0, microseconds=0,\n                milliseconds=0, minutes=0, hours=0, weeks=0):\n        # Doing this efficiently and accurately in C is going to be difficult\n        # and error-prone, due to ubiquitous overflow possibilities, and that\n        # C double doesn't have enough bits of precision to represent\n        # microseconds over 10K years faithfully.  The code here tries to make\n        # explicit where go-fast assumptions can be relied on, in order to\n        # guide the C implementation; it's way more convoluted than speed-\n        # ignoring auto-overflow-to-long idiomatic Python could be.\n\n        # XXX Check that all inputs are ints or floats.\n\n        # Final values, all integer.\n        # s and us fit in 32-bit signed ints; d isn't bounded.\n        d = s = us = 0\n\n        # Normalize everything to days, seconds, microseconds.\n        days += weeks*7\n        seconds += minutes*60 + hours*3600\n        microseconds += milliseconds*1000\n\n        # Get rid of all fractions, and normalize s and us.\n        # Take a deep breath <wink>.\n        if isinstance(days, float):\n            dayfrac, days = _math.modf(days)\n            daysecondsfrac, daysecondswhole = _math.modf(dayfrac * (24.*3600.))\n            assert daysecondswhole == int(daysecondswhole)  # can't overflow\n            s = int(daysecondswhole)\n            assert days == int(days)\n            d = int(days)\n        else:\n            daysecondsfrac = 0.0\n            d = days\n        assert isinstance(daysecondsfrac, float)\n        assert abs(daysecondsfrac) <= 1.0\n        assert isinstance(d, int)\n        assert abs(s) <= 24 * 3600\n        # days isn't referenced again before redefinition\n\n        if isinstance(seconds, float):\n            secondsfrac, seconds = _math.modf(seconds)\n            assert seconds == int(seconds)\n            seconds = int(seconds)\n            secondsfrac += daysecondsfrac\n            assert abs(secondsfrac) <= 2.0\n        else:\n            secondsfrac = daysecondsfrac\n        # daysecondsfrac isn't referenced again\n        assert isinstance(secondsfrac, float)\n        assert abs(secondsfrac) <= 2.0\n\n        assert isinstance(seconds, int)\n        days, seconds = divmod(seconds, 24*3600)\n        d += days\n        s += int(seconds)    # can't overflow\n        assert isinstance(s, int)\n        assert abs(s) <= 2 * 24 * 3600\n        # seconds isn't referenced again before redefinition\n\n        usdouble = secondsfrac * 1e6\n        assert abs(usdouble) < 2.1e6    # exact value not critical\n        # secondsfrac isn't referenced again\n\n        if isinstance(microseconds, float):\n            microseconds = round(microseconds + usdouble)\n            seconds, microseconds = divmod(microseconds, 1000000)\n            days, seconds = divmod(seconds, 24*3600)\n            d += days\n            s += seconds\n        else:\n            microseconds = int(microseconds)\n            seconds, microseconds = divmod(microseconds, 1000000)\n            days, seconds = divmod(seconds, 24*3600)\n            d += days\n            s += seconds\n            microseconds = round(microseconds + usdouble)\n        assert isinstance(s, int)\n        assert isinstance(microseconds, int)\n        assert abs(s) <= 3 * 24 * 3600\n        assert abs(microseconds) < 3.1e6\n\n        # Just a little bit of carrying possible for microseconds and seconds.\n        seconds, us = divmod(microseconds, 1000000)\n        s += seconds\n        days, s = divmod(s, 24*3600)\n        d += days\n\n        assert isinstance(d, int)\n        assert isinstance(s, int) and 0 <= s < 24*3600\n        assert isinstance(us, int) and 0 <= us < 1000000\n\n        if abs(d) > 999999999:\n            raise OverflowError(\"timedelta # of days is too large: %d\" % d)\n\n        self = object.__new__(cls)\n        self._days = d\n        self._seconds = s\n        self._microseconds = us\n        self._hashcode = -1\n        return self\n\n    def __repr__(self):\n        if self._microseconds:\n            return \"%s.%s(%d, %d, %d)\" % (self.__class__.__module__,\n                                          self.__class__.__qualname__,\n                                          self._days,\n                                          self._seconds,\n                                          self._microseconds)\n        if self._seconds:\n            return \"%s.%s(%d, %d)\" % (self.__class__.__module__,\n                                      self.__class__.__qualname__,\n                                      self._days,\n                                      self._seconds)\n        return \"%s.%s(%d)\" % (self.__class__.__module__,\n                              self.__class__.__qualname__,\n                              self._days)\n\n    def __str__(self):\n        mm, ss = divmod(self._seconds, 60)\n        hh, mm = divmod(mm, 60)\n        s = \"%d:%02d:%02d\" % (hh, mm, ss)\n        if self._days:\n            def plural(n):\n                return n, abs(n) != 1 and \"s\" or \"\"\n            s = (\"%d day%s, \" % plural(self._days)) + s\n        if self._microseconds:\n            s = s + \".%06d\" % self._microseconds\n        return s\n\n    def total_seconds(self):\n        \"\"\"Total seconds in the duration.\"\"\"\n        return ((self.days * 86400 + self.seconds) * 10**6 +\n                self.microseconds) / 10**6\n\n    # Read-only field accessors\n    @property\n    def days(self):\n        \"\"\"days\"\"\"\n        return self._days\n\n    @property\n    def seconds(self):\n        \"\"\"seconds\"\"\"\n        return self._seconds\n\n    @property\n    def microseconds(self):\n        \"\"\"microseconds\"\"\"\n        return self._microseconds\n\n    def __add__(self, other):\n        if isinstance(other, timedelta):\n            # for CPython compatibility, we cannot use\n            # our __class__ here, but need a real timedelta\n            return timedelta(self._days + other._days,\n                             self._seconds + other._seconds,\n                             self._microseconds + other._microseconds)\n        return NotImplemented\n\n    __radd__ = __add__\n\n    def __sub__(self, other):\n        if isinstance(other, timedelta):\n            # for CPython compatibility, we cannot use\n            # our __class__ here, but need a real timedelta\n            return timedelta(self._days - other._days,\n                             self._seconds - other._seconds,\n                             self._microseconds - other._microseconds)\n        return NotImplemented\n\n    def __rsub__(self, other):\n        if isinstance(other, timedelta):\n            return -self + other\n        return NotImplemented\n\n    def __neg__(self):\n        # for CPython compatibility, we cannot use\n        # our __class__ here, but need a real timedelta\n        return timedelta(-self._days,\n                         -self._seconds,\n                         -self._microseconds)\n\n    def __pos__(self):\n        return self\n\n    def __abs__(self):\n        if self._days < 0:\n            return -self\n        else:\n            return self\n\n    def __mul__(self, other):\n        if isinstance(other, int):\n            # for CPython compatibility, we cannot use\n            # our __class__ here, but need a real timedelta\n            return timedelta(self._days * other,\n                             self._seconds * other,\n                             self._microseconds * other)\n        if isinstance(other, float):\n            usec = self._to_microseconds()\n            a, b = other.as_integer_ratio()\n            return timedelta(0, 0, _divide_and_round(usec * a, b))\n        return NotImplemented\n\n    __rmul__ = __mul__\n\n    def _to_microseconds(self):\n        return ((self._days * (24*3600) + self._seconds) * 1000000 +\n                self._microseconds)\n\n    def __floordiv__(self, other):\n        if not isinstance(other, (int, timedelta)):\n            return NotImplemented\n        usec = self._to_microseconds()\n        if isinstance(other, timedelta):\n            return usec // other._to_microseconds()\n        if isinstance(other, int):\n            return timedelta(0, 0, usec // other)\n\n    def __truediv__(self, other):\n        if not isinstance(other, (int, float, timedelta)):\n            return NotImplemented\n        usec = self._to_microseconds()\n        if isinstance(other, timedelta):\n            return usec / other._to_microseconds()\n        if isinstance(other, int):\n            return timedelta(0, 0, _divide_and_round(usec, other))\n        if isinstance(other, float):\n            a, b = other.as_integer_ratio()\n            return timedelta(0, 0, _divide_and_round(b * usec, a))\n\n    def __mod__(self, other):\n        if isinstance(other, timedelta):\n            r = self._to_microseconds() % other._to_microseconds()\n            return timedelta(0, 0, r)\n        return NotImplemented\n\n    def __divmod__(self, other):\n        if isinstance(other, timedelta):\n            q, r = divmod(self._to_microseconds(),\n                          other._to_microseconds())\n            return q, timedelta(0, 0, r)\n        return NotImplemented\n\n    # Comparisons of timedelta objects with other.\n\n    def __eq__(self, other):\n        if isinstance(other, timedelta):\n            return self._cmp(other) == 0\n        else:\n            return False\n\n    def __le__(self, other):\n        if isinstance(other, timedelta):\n            return self._cmp(other) <= 0\n        else:\n            _cmperror(self, other)\n\n    def __lt__(self, other):\n        if isinstance(other, timedelta):\n            return self._cmp(other) < 0\n        else:\n            _cmperror(self, other)\n\n    def __ge__(self, other):\n        if isinstance(other, timedelta):\n            return self._cmp(other) >= 0\n        else:\n            _cmperror(self, other)\n\n    def __gt__(self, other):\n        if isinstance(other, timedelta):\n            return self._cmp(other) > 0\n        else:\n            _cmperror(self, other)\n\n    def _cmp(self, other):\n        assert isinstance(other, timedelta)\n        return _cmp(self._getstate(), other._getstate())\n\n    def __hash__(self):\n        if self._hashcode == -1:\n            self._hashcode = hash(self._getstate())\n        return self._hashcode\n\n    def __bool__(self):\n        return (self._days != 0 or\n                self._seconds != 0 or\n                self._microseconds != 0)\n\n    # Pickle support.\n\n    def _getstate(self):\n        return (self._days, self._seconds, self._microseconds)\n\n    def __reduce__(self):\n        return (self.__class__, self._getstate())\n\ntimedelta.min = timedelta(-999999999)\ntimedelta.max = timedelta(days=999999999, hours=23, minutes=59, seconds=59,\n                          microseconds=999999)\ntimedelta.resolution = timedelta(microseconds=1)\n\nclass date:\n    \"\"\"Concrete date type.\n\n    Constructors:\n\n    __new__()\n    fromtimestamp()\n    today()\n    fromordinal()\n\n    Operators:\n\n    __repr__, __str__\n    __eq__, __le__, __lt__, __ge__, __gt__, __hash__\n    __add__, __radd__, __sub__ (add/radd only with timedelta arg)\n\n    Methods:\n\n    timetuple()\n    toordinal()\n    weekday()\n    isoweekday(), isocalendar(), isoformat()\n    ctime()\n    strftime()\n\n    Properties (readonly):\n    year, month, day\n    \"\"\"\n    __slots__ = '_year', '_month', '_day', '_hashcode'\n\n    def __new__(cls, year, month=None, day=None):\n        \"\"\"Constructor.\n\n        Arguments:\n\n        year, month, day (required, base 1)\n        \"\"\"\n        if month is None and isinstance(year, bytes) and len(year) == 4 and \\\n                1 <= year[2] <= 12:\n            # Pickle support\n            self = object.__new__(cls)\n            self.__setstate(year)\n            self._hashcode = -1\n            return self\n        year, month, day = _check_date_fields(year, month, day)\n        self = object.__new__(cls)\n        self._year = year\n        self._month = month\n        self._day = day\n        self._hashcode = -1\n        return self\n\n    # Additional constructors\n\n    @classmethod\n    def fromtimestamp(cls, t):\n        \"Construct a date from a POSIX timestamp (like time.time()).\"\n        y, m, d, hh, mm, ss, weekday, jday, dst = _time.localtime(t)\n        return cls(y, m, d)\n\n    @classmethod\n    def today(cls):\n        \"Construct a date from time.time().\"\n        t = _time.time()\n        return cls.fromtimestamp(t)\n\n    @classmethod\n    def fromordinal(cls, n):\n        \"\"\"Construct a date from a proleptic Gregorian ordinal.\n\n        January 1 of year 1 is day 1.  Only the year, month and day are\n        non-zero in the result.\n        \"\"\"\n        y, m, d = _ord2ymd(n)\n        return cls(y, m, d)\n\n    # Conversions to string\n\n    def __repr__(self):\n        \"\"\"Convert to formal string, for repr().\n\n        >>> dt = datetime(2010, 1, 1)\n        >>> repr(dt)\n        'datetime.datetime(2010, 1, 1, 0, 0)'\n\n        >>> dt = datetime(2010, 1, 1, tzinfo=timezone.utc)\n        >>> repr(dt)\n        'datetime.datetime(2010, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)'\n        \"\"\"\n        return \"%s.%s(%d, %d, %d)\" % (self.__class__.__module__,\n                                      self.__class__.__qualname__,\n                                      self._year,\n                                      self._month,\n                                      self._day)\n    # XXX These shouldn't depend on time.localtime(), because that\n    # clips the usable dates to [1970 .. 2038).  At least ctime() is\n    # easily done without using strftime() -- that's better too because\n    # strftime(\"%c\", ...) is locale specific.\n\n\n    def ctime(self):\n        \"Return ctime() style string.\"\n        weekday = self.toordinal() % 7 or 7\n        return \"%s %s %2d 00:00:00 %04d\" % (\n            _DAYNAMES[weekday],\n            _MONTHNAMES[self._month],\n            self._day, self._year)\n\n    def strftime(self, fmt):\n        \"Format using strftime().\"\n        return _wrap_strftime(self, fmt, self.timetuple())\n\n    def __format__(self, fmt):\n        if not isinstance(fmt, str):\n            raise TypeError(\"must be str, not %s\" % type(fmt).__name__)\n        if len(fmt) != 0:\n            return self.strftime(fmt)\n        return str(self)\n\n    def isoformat(self):\n        \"\"\"Return the date formatted according to ISO.\n\n        This is 'YYYY-MM-DD'.\n\n        References:\n        - http://www.w3.org/TR/NOTE-datetime\n        - http://www.cl.cam.ac.uk/~mgk25/iso-time.html\n        \"\"\"\n        return \"%04d-%02d-%02d\" % (self._year, self._month, self._day)\n\n    __str__ = isoformat\n\n    # Read-only field accessors\n    @property\n    def year(self):\n        \"\"\"year (1-9999)\"\"\"\n        return self._year\n\n    @property\n    def month(self):\n        \"\"\"month (1-12)\"\"\"\n        return self._month\n\n    @property\n    def day(self):\n        \"\"\"day (1-31)\"\"\"\n        return self._day\n\n    # Standard conversions, __eq__, __le__, __lt__, __ge__, __gt__,\n    # __hash__ (and helpers)\n\n    def timetuple(self):\n        \"Return local time tuple compatible with time.localtime().\"\n        return _build_struct_time(self._year, self._month, self._day,\n                                  0, 0, 0, -1)\n\n    def toordinal(self):\n        \"\"\"Return proleptic Gregorian ordinal for the year, month and day.\n\n        January 1 of year 1 is day 1.  Only the year, month and day values\n        contribute to the result.\n        \"\"\"\n        return _ymd2ord(self._year, self._month, self._day)\n\n    def replace(self, year=None, month=None, day=None):\n        \"\"\"Return a new date with new values for the specified fields.\"\"\"\n        if year is None:\n            year = self._year\n        if month is None:\n            month = self._month\n        if day is None:\n            day = self._day\n        return type(self)(year, month, day)\n\n    # Comparisons of date objects with other.\n\n    def __eq__(self, other):\n        if isinstance(other, date):\n            return self._cmp(other) == 0\n        return NotImplemented\n\n    def __le__(self, other):\n        if isinstance(other, date):\n            return self._cmp(other) <= 0\n        return NotImplemented\n\n    def __lt__(self, other):\n        if isinstance(other, date):\n            return self._cmp(other) < 0\n        return NotImplemented\n\n    def __ge__(self, other):\n        if isinstance(other, date):\n            return self._cmp(other) >= 0\n        return NotImplemented\n\n    def __gt__(self, other):\n        if isinstance(other, date):\n            return self._cmp(other) > 0\n        return NotImplemented\n\n    def _cmp(self, other):\n        assert isinstance(other, date)\n        y, m, d = self._year, self._month, self._day\n        y2, m2, d2 = other._year, other._month, other._day\n        return _cmp((y, m, d), (y2, m2, d2))\n\n    def __hash__(self):\n        \"Hash.\"\n        if self._hashcode == -1:\n            self._hashcode = hash(self._getstate())\n        return self._hashcode\n\n    # Computations\n\n    def __add__(self, other):\n        \"Add a date to a timedelta.\"\n        if isinstance(other, timedelta):\n            o = self.toordinal() + other.days\n            if 0 < o <= _MAXORDINAL:\n                return date.fromordinal(o)\n            raise OverflowError(\"result out of range\")\n        return NotImplemented\n\n    __radd__ = __add__\n\n    def __sub__(self, other):\n        \"\"\"Subtract two dates, or a date and a timedelta.\"\"\"\n        if isinstance(other, timedelta):\n            return self + timedelta(-other.days)\n        if isinstance(other, date):\n            days1 = self.toordinal()\n            days2 = other.toordinal()\n            return timedelta(days1 - days2)\n        return NotImplemented\n\n    def weekday(self):\n        \"Return day of the week, where Monday == 0 ... Sunday == 6.\"\n        return (self.toordinal() + 6) % 7\n\n    # Day-of-the-week and week-of-the-year, according to ISO\n\n    def isoweekday(self):\n        \"Return day of the week, where Monday == 1 ... Sunday == 7.\"\n        # 1-Jan-0001 is a Monday\n        return self.toordinal() % 7 or 7\n\n    def isocalendar(self):\n        \"\"\"Return a 3-tuple containing ISO year, week number, and weekday.\n\n        The first ISO week of the year is the (Mon-Sun) week\n        containing the year's first Thursday; everything else derives\n        from that.\n\n        The first week is 1; Monday is 1 ... Sunday is 7.\n\n        ISO calendar algorithm taken from\n        http://www.phys.uu.nl/~vgent/calendar/isocalendar.htm\n        (used with permission)\n        \"\"\"\n        year = self._year\n        week1monday = _isoweek1monday(year)\n        today = _ymd2ord(self._year, self._month, self._day)\n        # Internally, week and day have origin 0\n        week, day = divmod(today - week1monday, 7)\n        if week < 0:\n            year -= 1\n            week1monday = _isoweek1monday(year)\n            week, day = divmod(today - week1monday, 7)\n        elif week >= 52:\n            if today >= _isoweek1monday(year+1):\n                year += 1\n                week = 0\n        return year, week+1, day+1\n\n    # Pickle support.\n\n    def _getstate(self):\n        yhi, ylo = divmod(self._year, 256)\n        return bytes([yhi, ylo, self._month, self._day]),\n\n    def __setstate(self, string):\n        yhi, ylo, self._month, self._day = string\n        self._year = yhi * 256 + ylo\n\n    def __reduce__(self):\n        return (self.__class__, self._getstate())\n\n_date_class = date  # so functions w/ args named \"date\" can get at the class\n\ndate.min = date(1, 1, 1)\ndate.max = date(9999, 12, 31)\ndate.resolution = timedelta(days=1)\n\n\nclass tzinfo:\n    \"\"\"Abstract base class for time zone info classes.\n\n    Subclasses must override the name(), utcoffset() and dst() methods.\n    \"\"\"\n    __slots__ = ()\n\n    def tzname(self, dt):\n        \"datetime -> string name of time zone.\"\n        raise NotImplementedError(\"tzinfo subclass must override tzname()\")\n\n    def utcoffset(self, dt):\n        \"datetime -> minutes east of UTC (negative for west of UTC)\"\n        raise NotImplementedError(\"tzinfo subclass must override utcoffset()\")\n\n    def dst(self, dt):\n        \"\"\"datetime -> DST offset in minutes east of UTC.\n\n        Return 0 if DST not in effect.  utcoffset() must include the DST\n        offset.\n        \"\"\"\n        raise NotImplementedError(\"tzinfo subclass must override dst()\")\n\n    def fromutc(self, dt):\n        \"datetime in UTC -> datetime in local time.\"\n\n        if not isinstance(dt, datetime):\n            raise TypeError(\"fromutc() requires a datetime argument\")\n        if dt.tzinfo is not self:\n            raise ValueError(\"dt.tzinfo is not self\")\n\n        dtoff = dt.utcoffset()\n        if dtoff is None:\n            raise ValueError(\"fromutc() requires a non-None utcoffset() \"\n                             \"result\")\n\n        # See the long comment block at the end of this file for an\n        # explanation of this algorithm.\n        dtdst = dt.dst()\n        if dtdst is None:\n            raise ValueError(\"fromutc() requires a non-None dst() result\")\n        delta = dtoff - dtdst\n        if delta:\n            dt += delta\n            dtdst = dt.dst()\n            if dtdst is None:\n                raise ValueError(\"fromutc(): dt.dst gave inconsistent \"\n                                 \"results; cannot convert\")\n        return dt + dtdst\n\n    # Pickle support.\n\n    def __reduce__(self):\n        getinitargs = getattr(self, \"__getinitargs__\", None)\n        if getinitargs:\n            args = getinitargs()\n        else:\n            args = ()\n        getstate = getattr(self, \"__getstate__\", None)\n        if getstate:\n            state = getstate()\n        else:\n            state = getattr(self, \"__dict__\", None) or None\n        if state is None:\n            return (self.__class__, args)\n        else:\n            return (self.__class__, args, state)\n\n_tzinfo_class = tzinfo\n\nclass time:\n    \"\"\"Time with time zone.\n\n    Constructors:\n\n    __new__()\n\n    Operators:\n\n    __repr__, __str__\n    __eq__, __le__, __lt__, __ge__, __gt__, __hash__\n\n    Methods:\n\n    strftime()\n    isoformat()\n    utcoffset()\n    tzname()\n    dst()\n\n    Properties (readonly):\n    hour, minute, second, microsecond, tzinfo, fold\n    \"\"\"\n    __slots__ = '_hour', '_minute', '_second', '_microsecond', '_tzinfo', '_hashcode', '_fold'\n\n    def __new__(cls, hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0):\n        \"\"\"Constructor.\n\n        Arguments:\n\n        hour, minute (required)\n        second, microsecond (default to zero)\n        tzinfo (default to None)\n        fold (keyword only, default to zero)\n        \"\"\"\n        if isinstance(hour, bytes) and len(hour) == 6 and hour[0]&0x7F < 24:\n            # Pickle support\n            self = object.__new__(cls)\n            self.__setstate(hour, minute or None)\n            self._hashcode = -1\n            return self\n        hour, minute, second, microsecond, fold = _check_time_fields(\n            hour, minute, second, microsecond, fold)\n        _check_tzinfo_arg(tzinfo)\n        self = object.__new__(cls)\n        self._hour = hour\n        self._minute = minute\n        self._second = second\n        self._microsecond = microsecond\n        self._tzinfo = tzinfo\n        self._hashcode = -1\n        self._fold = fold\n        return self\n\n    # Read-only field accessors\n    @property\n    def hour(self):\n        \"\"\"hour (0-23)\"\"\"\n        return self._hour\n\n    @property\n    def minute(self):\n        \"\"\"minute (0-59)\"\"\"\n        return self._minute\n\n    @property\n    def second(self):\n        \"\"\"second (0-59)\"\"\"\n        return self._second\n\n    @property\n    def microsecond(self):\n        \"\"\"microsecond (0-999999)\"\"\"\n        return self._microsecond\n\n    @property\n    def tzinfo(self):\n        \"\"\"timezone info object\"\"\"\n        return self._tzinfo\n\n    @property\n    def fold(self):\n        return self._fold\n\n    # Standard conversions, __hash__ (and helpers)\n\n    # Comparisons of time objects with other.\n\n    def __eq__(self, other):\n        if isinstance(other, time):\n            return self._cmp(other, allow_mixed=True) == 0\n        else:\n            return False\n\n    def __le__(self, other):\n        if isinstance(other, time):\n            return self._cmp(other) <= 0\n        else:\n            _cmperror(self, other)\n\n    def __lt__(self, other):\n        if isinstance(other, time):\n            return self._cmp(other) < 0\n        else:\n            _cmperror(self, other)\n\n    def __ge__(self, other):\n        if isinstance(other, time):\n            return self._cmp(other) >= 0\n        else:\n            _cmperror(self, other)\n\n    def __gt__(self, other):\n        if isinstance(other, time):\n            return self._cmp(other) > 0\n        else:\n            _cmperror(self, other)\n\n    def _cmp(self, other, allow_mixed=False):\n        assert isinstance(other, time)\n        mytz = self._tzinfo\n        ottz = other._tzinfo\n        myoff = otoff = None\n\n        if mytz is ottz:\n            base_compare = True\n        else:\n            myoff = self.utcoffset()\n            otoff = other.utcoffset()\n            base_compare = myoff == otoff\n\n        if base_compare:\n            return _cmp((self._hour, self._minute, self._second,\n                         self._microsecond),\n                        (other._hour, other._minute, other._second,\n                         other._microsecond))\n        if myoff is None or otoff is None:\n            if allow_mixed:\n                return 2 # arbitrary non-zero value\n            else:\n                raise TypeError(\"cannot compare naive and aware times\")\n        myhhmm = self._hour * 60 + self._minute - myoff//timedelta(minutes=1)\n        othhmm = other._hour * 60 + other._minute - otoff//timedelta(minutes=1)\n        return _cmp((myhhmm, self._second, self._microsecond),\n                    (othhmm, other._second, other._microsecond))\n\n    def __hash__(self):\n        \"\"\"Hash.\"\"\"\n        if self._hashcode == -1:\n            if self.fold:\n                t = self.replace(fold=0)\n            else:\n                t = self\n            tzoff = t.utcoffset()\n            if not tzoff:  # zero or None\n                self._hashcode = hash(t._getstate()[0])\n            else:\n                h, m = divmod(timedelta(hours=self.hour, minutes=self.minute) - tzoff,\n                              timedelta(hours=1))\n                assert not m % timedelta(minutes=1), \"whole minute\"\n                m //= timedelta(minutes=1)\n                if 0 <= h < 24:\n                    self._hashcode = hash(time(h, m, self.second, self.microsecond))\n                else:\n                    self._hashcode = hash((h, m, self.second, self.microsecond))\n        return self._hashcode\n\n    # Conversion to string\n\n    def _tzstr(self, sep=\":\"):\n        \"\"\"Return formatted timezone offset (+xx:xx) or None.\"\"\"\n        off = self.utcoffset()\n        if off is not None:\n            if off.days < 0:\n                sign = \"-\"\n                off = -off\n            else:\n                sign = \"+\"\n            hh, mm = divmod(off, timedelta(hours=1))\n            mm, ss = divmod(mm, timedelta(minutes=1))\n            assert 0 <= hh < 24\n            off = \"%s%02d%s%02d\" % (sign, hh, sep, mm)\n            if ss:\n                off += ':%02d' % ss.seconds\n        return off\n\n    def __repr__(self):\n        \"\"\"Convert to formal string, for repr().\"\"\"\n        if self._microsecond != 0:\n            s = \", %d, %d\" % (self._second, self._microsecond)\n        elif self._second != 0:\n            s = \", %d\" % self._second\n        else:\n            s = \"\"\n        s= \"%s.%s(%d, %d%s)\" % (self.__class__.__module__,\n                                self.__class__.__qualname__,\n                                self._hour, self._minute, s)\n        if self._tzinfo is not None:\n            assert s[-1:] == \")\"\n            s = s[:-1] + \", tzinfo=%r\" % self._tzinfo + \")\"\n        if self._fold:\n            assert s[-1:] == \")\"\n            s = s[:-1] + \", fold=1)\"\n        return s\n\n    def isoformat(self, timespec='auto'):\n        \"\"\"Return the time formatted according to ISO.\n\n        The full format is 'HH:MM:SS.mmmmmm+zz:zz'. By default, the fractional\n        part is omitted if self.microsecond == 0.\n\n        The optional argument timespec specifies the number of additional\n        terms of the time to include.\n        \"\"\"\n        s = _format_time(self._hour, self._minute, self._second,\n                          self._microsecond, timespec)\n        tz = self._tzstr()\n        if tz:\n            s += tz\n        return s\n\n    __str__ = isoformat\n\n    def strftime(self, fmt):\n        \"\"\"Format using strftime().  The date part of the timestamp passed\n        to underlying strftime should not be used.\n        \"\"\"\n        # The year must be >= 1000 else Python's strftime implementation\n        # can raise a bogus exception.\n        timetuple = (1900, 1, 1,\n                     self._hour, self._minute, self._second,\n                     0, 1, -1)\n        return _wrap_strftime(self, fmt, timetuple)\n\n    def __format__(self, fmt):\n        if not isinstance(fmt, str):\n            raise TypeError(\"must be str, not %s\" % type(fmt).__name__)\n        if len(fmt) != 0:\n            return self.strftime(fmt)\n        return str(self)\n\n    # Timezone functions\n\n    def utcoffset(self):\n        \"\"\"Return the timezone offset in minutes east of UTC (negative west of\n        UTC).\"\"\"\n        if self._tzinfo is None:\n            return None\n        offset = self._tzinfo.utcoffset(None)\n        _check_utc_offset(\"utcoffset\", offset)\n        return offset\n\n    def tzname(self):\n        \"\"\"Return the timezone name.\n\n        Note that the name is 100% informational -- there's no requirement that\n        it mean anything in particular. For example, \"GMT\", \"UTC\", \"-500\",\n        \"-5:00\", \"EDT\", \"US/Eastern\", \"America/New York\" are all valid replies.\n        \"\"\"\n        if self._tzinfo is None:\n            return None\n        name = self._tzinfo.tzname(None)\n        _check_tzname(name)\n        return name\n\n    def dst(self):\n        \"\"\"Return 0 if DST is not in effect, or the DST offset (in minutes\n        eastward) if DST is in effect.\n\n        This is purely informational; the DST offset has already been added to\n        the UTC offset returned by utcoffset() if applicable, so there's no\n        need to consult dst() unless you're interested in displaying the DST\n        info.\n        \"\"\"\n        if self._tzinfo is None:\n            return None\n        offset = self._tzinfo.dst(None)\n        _check_utc_offset(\"dst\", offset)\n        return offset\n\n    def replace(self, hour=None, minute=None, second=None, microsecond=None,\n                tzinfo=True, *, fold=None):\n        \"\"\"Return a new time with new values for the specified fields.\"\"\"\n        if hour is None:\n            hour = self.hour\n        if minute is None:\n            minute = self.minute\n        if second is None:\n            second = self.second\n        if microsecond is None:\n            microsecond = self.microsecond\n        if tzinfo is True:\n            tzinfo = self.tzinfo\n        if fold is None:\n            fold = self._fold\n        return type(self)(hour, minute, second, microsecond, tzinfo, fold=fold)\n\n    # Pickle support.\n\n    def _getstate(self, protocol=3):\n        us2, us3 = divmod(self._microsecond, 256)\n        us1, us2 = divmod(us2, 256)\n        h = self._hour\n        if self._fold and protocol > 3:\n            h += 128\n        basestate = bytes([h, self._minute, self._second,\n                           us1, us2, us3])\n        if self._tzinfo is None:\n            return (basestate,)\n        else:\n            return (basestate, self._tzinfo)\n\n    def __setstate(self, string, tzinfo):\n        if tzinfo is not None and not isinstance(tzinfo, _tzinfo_class):\n            raise TypeError(\"bad tzinfo state arg\")\n        h, self._minute, self._second, us1, us2, us3 = string\n        if h > 127:\n            self._fold = 1\n            self._hour = h - 128\n        else:\n            self._fold = 0\n            self._hour = h\n        self._microsecond = (((us1 << 8) | us2) << 8) | us3\n        self._tzinfo = tzinfo\n\n    def __reduce_ex__(self, protocol):\n        return (time, self._getstate(protocol))\n\n    def __reduce__(self):\n        return self.__reduce_ex__(2)\n\n_time_class = time  # so functions w/ args named \"time\" can get at the class\n\ntime.min = time(0, 0, 0)\ntime.max = time(23, 59, 59, 999999)\ntime.resolution = timedelta(microseconds=1)\n\nclass datetime(date):\n    \"\"\"datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\n\n    The year, month and day arguments are required. tzinfo may be None, or an\n    instance of a tzinfo subclass. The remaining arguments may be ints.\n    \"\"\"\n    __slots__ = date.__slots__ + time.__slots__\n\n    def __new__(cls, year, month=None, day=None, hour=0, minute=0, second=0,\n                microsecond=0, tzinfo=None, *, fold=0):\n        if isinstance(year, bytes) and len(year) == 10 and 1 <= year[2]&0x7F <= 12:\n            # Pickle support\n            self = object.__new__(cls)\n            self.__setstate(year, month)\n            self._hashcode = -1\n            return self\n        year, month, day = _check_date_fields(year, month, day)\n        hour, minute, second, microsecond, fold = _check_time_fields(\n            hour, minute, second, microsecond, fold)\n        _check_tzinfo_arg(tzinfo)\n        self = object.__new__(cls)\n        self._year = year\n        self._month = month\n        self._day = day\n        self._hour = hour\n        self._minute = minute\n        self._second = second\n        self._microsecond = microsecond\n        self._tzinfo = tzinfo\n        self._hashcode = -1\n        self._fold = fold\n        return self\n\n    # Read-only field accessors\n    @property\n    def hour(self):\n        \"\"\"hour (0-23)\"\"\"\n        return self._hour\n\n    @property\n    def minute(self):\n        \"\"\"minute (0-59)\"\"\"\n        return self._minute\n\n    @property\n    def second(self):\n        \"\"\"second (0-59)\"\"\"\n        return self._second\n\n    @property\n    def microsecond(self):\n        \"\"\"microsecond (0-999999)\"\"\"\n        return self._microsecond\n\n    @property\n    def tzinfo(self):\n        \"\"\"timezone info object\"\"\"\n        return self._tzinfo\n\n    @property\n    def fold(self):\n        return self._fold\n\n    @classmethod\n    def _fromtimestamp(cls, t, utc, tz):\n        \"\"\"Construct a datetime from a POSIX timestamp (like time.time()).\n\n        A timezone info object may be passed in as well.\n        \"\"\"\n        frac, t = _math.modf(t)\n        us = round(frac * 1e6)\n        if us >= 1000000:\n            t += 1\n            us -= 1000000\n        elif us < 0:\n            t -= 1\n            us += 1000000\n\n        converter = _time.gmtime if utc else _time.localtime\n        y, m, d, hh, mm, ss, weekday, jday, dst = converter(t)\n        ss = min(ss, 59)    # clamp out leap seconds if the platform has them\n        result = cls(y, m, d, hh, mm, ss, us, tz)\n        if tz is None:\n            # As of version 2015f max fold in IANA database is\n            # 23 hours at 1969-09-30 13:00:00 in Kwajalein.\n            # Let's probe 24 hours in the past to detect a transition:\n            max_fold_seconds = 24 * 3600\n            y, m, d, hh, mm, ss = converter(t - max_fold_seconds)[:6]\n            probe1 = cls(y, m, d, hh, mm, ss, us, tz)\n            trans = result - probe1 - timedelta(0, max_fold_seconds)\n            if trans.days < 0:\n                y, m, d, hh, mm, ss = converter(t + trans // timedelta(0, 1))[:6]\n                probe2 = cls(y, m, d, hh, mm, ss, us, tz)\n                if probe2 == result:\n                    result._fold = 1\n        else:\n            result = tz.fromutc(result)\n        return result\n\n    @classmethod\n    def fromtimestamp(cls, t, tz=None):\n        \"\"\"Construct a datetime from a POSIX timestamp (like time.time()).\n\n        A timezone info object may be passed in as well.\n        \"\"\"\n        _check_tzinfo_arg(tz)\n\n        return cls._fromtimestamp(t, tz is not None, tz)\n\n    @classmethod\n    def utcfromtimestamp(cls, t):\n        \"\"\"Construct a naive UTC datetime from a POSIX timestamp.\"\"\"\n        return cls._fromtimestamp(t, True, None)\n\n    @classmethod\n    def now(cls, tz=None):\n        \"Construct a datetime from time.time() and optional time zone info.\"\n        t = _time.time()\n        return cls.fromtimestamp(t, tz)\n\n    @classmethod\n    def utcnow(cls):\n        \"Construct a UTC datetime from time.time().\"\n        t = _time.time()\n        return cls.utcfromtimestamp(t)\n\n    @classmethod\n    def combine(cls, date, time, tzinfo=True):\n        \"Construct a datetime from a given date and a given time.\"\n        if not isinstance(date, _date_class):\n            raise TypeError(\"date argument must be a date instance\")\n        if not isinstance(time, _time_class):\n            raise TypeError(\"time argument must be a time instance\")\n        if tzinfo is True:\n            tzinfo = time.tzinfo\n        return cls(date.year, date.month, date.day,\n                   time.hour, time.minute, time.second, time.microsecond,\n                   tzinfo, fold=time.fold)\n\n    def timetuple(self):\n        \"Return local time tuple compatible with time.localtime().\"\n        dst = self.dst()\n        if dst is None:\n            dst = -1\n        elif dst:\n            dst = 1\n        else:\n            dst = 0\n        return _build_struct_time(self.year, self.month, self.day,\n                                  self.hour, self.minute, self.second,\n                                  dst)\n\n    def _mktime(self):\n        \"\"\"Return integer POSIX timestamp.\"\"\"\n        epoch = datetime(1970, 1, 1)\n        max_fold_seconds = 24 * 3600\n        t = (self - epoch) // timedelta(0, 1)\n        def local(u):\n            y, m, d, hh, mm, ss = _time.localtime(u)[:6]\n            return (datetime(y, m, d, hh, mm, ss) - epoch) // timedelta(0, 1)\n\n        # Our goal is to solve t = local(u) for u.\n        a = local(t) - t\n        u1 = t - a\n        t1 = local(u1)\n        if t1 == t:\n            # We found one solution, but it may not be the one we need.\n            # Look for an earlier solution (if `fold` is 0), or a\n            # later one (if `fold` is 1).\n            u2 = u1 + (-max_fold_seconds, max_fold_seconds)[self.fold]\n            b = local(u2) - u2\n            if a == b:\n                return u1\n        else:\n            b = t1 - u1\n            assert a != b\n        u2 = t - b\n        t2 = local(u2)\n        if t2 == t:\n            return u2\n        if t1 == t:\n            return u1\n        # We have found both offsets a and b, but neither t - a nor t - b is\n        # a solution.  This means t is in the gap.\n        return (max, min)[self.fold](u1, u2)\n\n\n    def timestamp(self):\n        \"Return POSIX timestamp as float\"\n        if self._tzinfo is None:\n            s = self._mktime()\n            return s + self.microsecond / 1e6\n        else:\n            return (self - _EPOCH).total_seconds()\n\n    def utctimetuple(self):\n        \"Return UTC time tuple compatible with time.gmtime().\"\n        offset = self.utcoffset()\n        if offset:\n            self -= offset\n        y, m, d = self.year, self.month, self.day\n        hh, mm, ss = self.hour, self.minute, self.second\n        return _build_struct_time(y, m, d, hh, mm, ss, 0)\n\n    def date(self):\n        \"Return the date part.\"\n        return date(self._year, self._month, self._day)\n\n    def time(self):\n        \"Return the time part, with tzinfo None.\"\n        return time(self.hour, self.minute, self.second, self.microsecond, fold=self.fold)\n\n    def timetz(self):\n        \"Return the time part, with same tzinfo.\"\n        return time(self.hour, self.minute, self.second, self.microsecond,\n                    self._tzinfo, fold=self.fold)\n\n    def replace(self, year=None, month=None, day=None, hour=None,\n                minute=None, second=None, microsecond=None, tzinfo=True,\n                *, fold=None):\n        \"\"\"Return a new datetime with new values for the specified fields.\"\"\"\n        if year is None:\n            year = self.year\n        if month is None:\n            month = self.month\n        if day is None:\n            day = self.day\n        if hour is None:\n            hour = self.hour\n        if minute is None:\n            minute = self.minute\n        if second is None:\n            second = self.second\n        if microsecond is None:\n            microsecond = self.microsecond\n        if tzinfo is True:\n            tzinfo = self.tzinfo\n        if fold is None:\n            fold = self.fold\n        return type(self)(year, month, day, hour, minute, second,\n                          microsecond, tzinfo, fold=fold)\n\n    def _local_timezone(self):\n        if self.tzinfo is None:\n            ts = self._mktime()\n        else:\n            ts = (self - _EPOCH) // timedelta(seconds=1)\n        localtm = _time.localtime(ts)\n        local = datetime(*localtm[:6])\n        try:\n            # Extract TZ data if available\n            gmtoff = localtm.tm_gmtoff\n            zone = localtm.tm_zone\n        except AttributeError:\n            delta = local - datetime(*_time.gmtime(ts)[:6])\n            zone = _time.strftime('%Z', localtm)\n            tz = timezone(delta, zone)\n        else:\n            tz = timezone(timedelta(seconds=gmtoff), zone)\n        return tz\n\n    def astimezone(self, tz=None):\n        if tz is None:\n            tz = self._local_timezone()\n        elif not isinstance(tz, tzinfo):\n            raise TypeError(\"tz argument must be an instance of tzinfo\")\n\n        mytz = self.tzinfo\n        if mytz is None:\n            mytz = self._local_timezone()\n\n        if tz is mytz:\n            return self\n\n        # Convert self to UTC, and attach the new time zone object.\n        myoffset = mytz.utcoffset(self)\n        if myoffset is None:\n            raise ValueError(\"astimezone() requires an aware datetime\")\n        utc = (self - myoffset).replace(tzinfo=tz)\n\n        # Convert from UTC to tz's local time.\n        return tz.fromutc(utc)\n\n    # Ways to produce a string.\n\n    def ctime(self):\n        \"Return ctime() style string.\"\n        weekday = self.toordinal() % 7 or 7\n        return \"%s %s %2d %02d:%02d:%02d %04d\" % (\n            _DAYNAMES[weekday],\n            _MONTHNAMES[self._month],\n            self._day,\n            self._hour, self._minute, self._second,\n            self._year)\n\n    def isoformat(self, sep='T', timespec='auto'):\n        \"\"\"Return the time formatted according to ISO.\n\n        The full format looks like 'YYYY-MM-DD HH:MM:SS.mmmmmm'.\n        By default, the fractional part is omitted if self.microsecond == 0.\n\n        If self.tzinfo is not None, the UTC offset is also attached, giving\n        giving a full format of 'YYYY-MM-DD HH:MM:SS.mmmmmm+HH:MM'.\n\n        Optional argument sep specifies the separator between date and\n        time, default 'T'.\n\n        The optional argument timespec specifies the number of additional\n        terms of the time to include.\n        \"\"\"\n        s = (\"%04d-%02d-%02d%c\" % (self._year, self._month, self._day, sep) +\n             _format_time(self._hour, self._minute, self._second,\n                          self._microsecond, timespec))\n\n        off = self.utcoffset()\n        if off is not None:\n            if off.days < 0:\n                sign = \"-\"\n                off = -off\n            else:\n                sign = \"+\"\n            hh, mm = divmod(off, timedelta(hours=1))\n            mm, ss = divmod(mm, timedelta(minutes=1))\n            s += \"%s%02d:%02d\" % (sign, hh, mm)\n            if ss:\n                assert not ss.microseconds\n                s += \":%02d\" % ss.seconds\n        return s\n\n    def __repr__(self):\n        \"\"\"Convert to formal string, for repr().\"\"\"\n        L = [self._year, self._month, self._day,  # These are never zero\n             self._hour, self._minute, self._second, self._microsecond]\n        if L[-1] == 0:\n            del L[-1]\n        if L[-1] == 0:\n            del L[-1]\n        s = \"%s.%s(%s)\" % (self.__class__.__module__,\n                           self.__class__.__qualname__,\n                           \", \".join(map(str, L)))\n        if self._tzinfo is not None:\n            assert s[-1:] == \")\"\n            s = s[:-1] + \", tzinfo=%r\" % self._tzinfo + \")\"\n        if self._fold:\n            assert s[-1:] == \")\"\n            s = s[:-1] + \", fold=1)\"\n        return s\n\n    def __str__(self):\n        \"Convert to string, for str().\"\n        return self.isoformat(sep=' ')\n\n    @classmethod\n    def strptime(cls, date_string, format):\n        'string, format -> new datetime parsed from a string (like time.strptime()).'\n        import _strptime\n        return _strptime._strptime_datetime(cls, date_string, format)\n\n    def utcoffset(self):\n        \"\"\"Return the timezone offset in minutes east of UTC (negative west of\n        UTC).\"\"\"\n        if self._tzinfo is None:\n            return None\n        offset = self._tzinfo.utcoffset(self)\n        _check_utc_offset(\"utcoffset\", offset)\n        return offset\n\n    def tzname(self):\n        \"\"\"Return the timezone name.\n\n        Note that the name is 100% informational -- there's no requirement that\n        it mean anything in particular. For example, \"GMT\", \"UTC\", \"-500\",\n        \"-5:00\", \"EDT\", \"US/Eastern\", \"America/New York\" are all valid replies.\n        \"\"\"\n        if self._tzinfo is None:\n            return None\n        name = self._tzinfo.tzname(self)\n        _check_tzname(name)\n        return name\n\n    def dst(self):\n        \"\"\"Return 0 if DST is not in effect, or the DST offset (in minutes\n        eastward) if DST is in effect.\n\n        This is purely informational; the DST offset has already been added to\n        the UTC offset returned by utcoffset() if applicable, so there's no\n        need to consult dst() unless you're interested in displaying the DST\n        info.\n        \"\"\"\n        if self._tzinfo is None:\n            return None\n        offset = self._tzinfo.dst(self)\n        _check_utc_offset(\"dst\", offset)\n        return offset\n\n    # Comparisons of datetime objects with other.\n\n    def __eq__(self, other):\n        if isinstance(other, datetime):\n            return self._cmp(other, allow_mixed=True) == 0\n        elif not isinstance(other, date):\n            return NotImplemented\n        else:\n            return False\n\n    def __le__(self, other):\n        if isinstance(other, datetime):\n            return self._cmp(other) <= 0\n        elif not isinstance(other, date):\n            return NotImplemented\n        else:\n            _cmperror(self, other)\n\n    def __lt__(self, other):\n        if isinstance(other, datetime):\n            return self._cmp(other) < 0\n        elif not isinstance(other, date):\n            return NotImplemented\n        else:\n            _cmperror(self, other)\n\n    def __ge__(self, other):\n        if isinstance(other, datetime):\n            return self._cmp(other) >= 0\n        elif not isinstance(other, date):\n            return NotImplemented\n        else:\n            _cmperror(self, other)\n\n    def __gt__(self, other):\n        if isinstance(other, datetime):\n            return self._cmp(other) > 0\n        elif not isinstance(other, date):\n            return NotImplemented\n        else:\n            _cmperror(self, other)\n\n    def _cmp(self, other, allow_mixed=False):\n        assert isinstance(other, datetime)\n        mytz = self._tzinfo\n        ottz = other._tzinfo\n        myoff = otoff = None\n\n        if mytz is ottz:\n            base_compare = True\n        else:\n            myoff = self.utcoffset()\n            otoff = other.utcoffset()\n            # Assume that allow_mixed means that we are called from __eq__\n            if allow_mixed:\n                if myoff != self.replace(fold=not self.fold).utcoffset():\n                    return 2\n                if otoff != other.replace(fold=not other.fold).utcoffset():\n                    return 2\n            base_compare = myoff == otoff\n\n        if base_compare:\n            return _cmp((self._year, self._month, self._day,\n                         self._hour, self._minute, self._second,\n                         self._microsecond),\n                        (other._year, other._month, other._day,\n                         other._hour, other._minute, other._second,\n                         other._microsecond))\n        if myoff is None or otoff is None:\n            if allow_mixed:\n                return 2 # arbitrary non-zero value\n            else:\n                raise TypeError(\"cannot compare naive and aware datetimes\")\n        # XXX What follows could be done more efficiently...\n        diff = self - other     # this will take offsets into account\n        if diff.days < 0:\n            return -1\n        return diff and 1 or 0\n\n    def __add__(self, other):\n        \"Add a datetime and a timedelta.\"\n        if not isinstance(other, timedelta):\n            return NotImplemented\n        delta = timedelta(self.toordinal(),\n                          hours=self._hour,\n                          minutes=self._minute,\n                          seconds=self._second,\n                          microseconds=self._microsecond)\n        delta += other\n        hour, rem = divmod(delta.seconds, 3600)\n        minute, second = divmod(rem, 60)\n        if 0 < delta.days <= _MAXORDINAL:\n            return datetime.combine(date.fromordinal(delta.days),\n                                    time(hour, minute, second,\n                                         delta.microseconds,\n                                         tzinfo=self._tzinfo))\n        raise OverflowError(\"result out of range\")\n\n    __radd__ = __add__\n\n    def __sub__(self, other):\n        \"Subtract two datetimes, or a datetime and a timedelta.\"\n        if not isinstance(other, datetime):\n            if isinstance(other, timedelta):\n                return self + -other\n            return NotImplemented\n\n        days1 = self.toordinal()\n        days2 = other.toordinal()\n        secs1 = self._second + self._minute * 60 + self._hour * 3600\n        secs2 = other._second + other._minute * 60 + other._hour * 3600\n        base = timedelta(days1 - days2,\n                         secs1 - secs2,\n                         self._microsecond - other._microsecond)\n        if self._tzinfo is other._tzinfo:\n            return base\n        myoff = self.utcoffset()\n        otoff = other.utcoffset()\n        if myoff == otoff:\n            return base\n        if myoff is None or otoff is None:\n            raise TypeError(\"cannot mix naive and timezone-aware time\")\n        return base + otoff - myoff\n\n    def __hash__(self):\n        if self._hashcode == -1:\n            if self.fold:\n                t = self.replace(fold=0)\n            else:\n                t = self\n            tzoff = t.utcoffset()\n            if tzoff is None:\n                self._hashcode = hash(t._getstate()[0])\n            else:\n                days = _ymd2ord(self.year, self.month, self.day)\n                seconds = self.hour * 3600 + self.minute * 60 + self.second\n                self._hashcode = hash(timedelta(days, seconds, self.microsecond) - tzoff)\n        return self._hashcode\n\n    # Pickle support.\n\n    def _getstate(self, protocol=3):\n        yhi, ylo = divmod(self._year, 256)\n        us2, us3 = divmod(self._microsecond, 256)\n        us1, us2 = divmod(us2, 256)\n        m = self._month\n        if self._fold and protocol > 3:\n            m += 128\n        basestate = bytes([yhi, ylo, m, self._day,\n                           self._hour, self._minute, self._second,\n                           us1, us2, us3])\n        if self._tzinfo is None:\n            return (basestate,)\n        else:\n            return (basestate, self._tzinfo)\n\n    def __setstate(self, string, tzinfo):\n        if tzinfo is not None and not isinstance(tzinfo, _tzinfo_class):\n            raise TypeError(\"bad tzinfo state arg\")\n        (yhi, ylo, m, self._day, self._hour,\n         self._minute, self._second, us1, us2, us3) = string\n        if m > 127:\n            self._fold = 1\n            self._month = m - 128\n        else:\n            self._fold = 0\n            self._month = m\n        self._year = yhi * 256 + ylo\n        self._microsecond = (((us1 << 8) | us2) << 8) | us3\n        self._tzinfo = tzinfo\n\n    def __reduce_ex__(self, protocol):\n        return (self.__class__, self._getstate(protocol))\n\n    def __reduce__(self):\n        return self.__reduce_ex__(2)\n\n\ndatetime.min = datetime(1, 1, 1)\ndatetime.max = datetime(9999, 12, 31, 23, 59, 59, 999999)\ndatetime.resolution = timedelta(microseconds=1)\n\n\ndef _isoweek1monday(year):\n    # Helper to calculate the day number of the Monday starting week 1\n    # XXX This could be done more efficiently\n    THURSDAY = 3\n    firstday = _ymd2ord(year, 1, 1)\n    firstweekday = (firstday + 6) % 7  # See weekday() above\n    week1monday = firstday - firstweekday\n    if firstweekday > THURSDAY:\n        week1monday += 7\n    return week1monday\n\nclass timezone(tzinfo):\n    __slots__ = '_offset', '_name'\n\n    # Sentinel value to disallow None\n    _Omitted = object()\n    def __new__(cls, offset, name=_Omitted):\n        if not isinstance(offset, timedelta):\n            raise TypeError(\"offset must be a timedelta\")\n        if name is cls._Omitted:\n            if not offset:\n                return cls.utc\n            name = None\n        elif not isinstance(name, str):\n            raise TypeError(\"name must be a string\")\n        if not cls._minoffset <= offset <= cls._maxoffset:\n            raise ValueError(\"offset must be a timedelta \"\n                             \"strictly between -timedelta(hours=24) and \"\n                             \"timedelta(hours=24).\")\n        if (offset.microseconds != 0 or offset.seconds % 60 != 0):\n            raise ValueError(\"offset must be a timedelta \"\n                             \"representing a whole number of minutes\")\n        return cls._create(offset, name)\n\n    @classmethod\n    def _create(cls, offset, name=None):\n        self = tzinfo.__new__(cls)\n        self._offset = offset\n        self._name = name\n        return self\n\n    def __getinitargs__(self):\n        \"\"\"pickle support\"\"\"\n        if self._name is None:\n            return (self._offset,)\n        return (self._offset, self._name)\n\n    def __eq__(self, other):\n        if type(other) != timezone:\n            return False\n        return self._offset == other._offset\n\n    def __hash__(self):\n        return hash(self._offset)\n\n    def __repr__(self):\n        \"\"\"Convert to formal string, for repr().\n\n        >>> tz = timezone.utc\n        >>> repr(tz)\n        'datetime.timezone.utc'\n        >>> tz = timezone(timedelta(hours=-5), 'EST')\n        >>> repr(tz)\n        \"datetime.timezone(datetime.timedelta(-1, 68400), 'EST')\"\n        \"\"\"\n        if self is self.utc:\n            return 'datetime.timezone.utc'\n        if self._name is None:\n            return \"%s.%s(%r)\" % (self.__class__.__module__,\n                                  self.__class__.__qualname__,\n                                  self._offset)\n        return \"%s.%s(%r, %r)\" % (self.__class__.__module__,\n                                  self.__class__.__qualname__,\n                                  self._offset, self._name)\n\n    def __str__(self):\n        return self.tzname(None)\n\n    def utcoffset(self, dt):\n        if isinstance(dt, datetime) or dt is None:\n            return self._offset\n        raise TypeError(\"utcoffset() argument must be a datetime instance\"\n                        \" or None\")\n\n    def tzname(self, dt):\n        if isinstance(dt, datetime) or dt is None:\n            if self._name is None:\n                return self._name_from_offset(self._offset)\n            return self._name\n        raise TypeError(\"tzname() argument must be a datetime instance\"\n                        \" or None\")\n\n    def dst(self, dt):\n        if isinstance(dt, datetime) or dt is None:\n            return None\n        raise TypeError(\"dst() argument must be a datetime instance\"\n                        \" or None\")\n\n    def fromutc(self, dt):\n        if isinstance(dt, datetime):\n            if dt.tzinfo is not self:\n                raise ValueError(\"fromutc: dt.tzinfo \"\n                                 \"is not self\")\n            return dt + self._offset\n        raise TypeError(\"fromutc() argument must be a datetime instance\"\n                        \" or None\")\n\n    _maxoffset = timedelta(hours=23, minutes=59)\n    _minoffset = -_maxoffset\n\n    @staticmethod\n    def _name_from_offset(delta):\n        if not delta:\n            return 'UTC'\n        if delta < timedelta(0):\n            sign = '-'\n            delta = -delta\n        else:\n            sign = '+'\n        hours, rest = divmod(delta, timedelta(hours=1))\n        minutes = rest // timedelta(minutes=1)\n        return 'UTC{}{:02d}:{:02d}'.format(sign, hours, minutes)\n\ntimezone.utc = timezone._create(timedelta(0))\ntimezone.min = timezone._create(timezone._minoffset)\ntimezone.max = timezone._create(timezone._maxoffset)\n_EPOCH = datetime(1970, 1, 1, tzinfo=timezone.utc)\n\n# Some time zone algebra.  For a datetime x, let\n#     x.n = x stripped of its timezone -- its naive time.\n#     x.o = x.utcoffset(), and assuming that doesn't raise an exception or\n#           return None\n#     x.d = x.dst(), and assuming that doesn't raise an exception or\n#           return None\n#     x.s = x's standard offset, x.o - x.d\n#\n# Now some derived rules, where k is a duration (timedelta).\n#\n# 1. x.o = x.s + x.d\n#    This follows from the definition of x.s.\n#\n# 2. If x and y have the same tzinfo member, x.s = y.s.\n#    This is actually a requirement, an assumption we need to make about\n#    sane tzinfo classes.\n#\n# 3. The naive UTC time corresponding to x is x.n - x.o.\n#    This is again a requirement for a sane tzinfo class.\n#\n# 4. (x+k).s = x.s\n#    This follows from #2, and that datimetimetz+timedelta preserves tzinfo.\n#\n# 5. (x+k).n = x.n + k\n#    Again follows from how arithmetic is defined.\n#\n# Now we can explain tz.fromutc(x).  Let's assume it's an interesting case\n# (meaning that the various tzinfo methods exist, and don't blow up or return\n# None when called).\n#\n# The function wants to return a datetime y with timezone tz, equivalent to x.\n# x is already in UTC.\n#\n# By #3, we want\n#\n#     y.n - y.o = x.n                             [1]\n#\n# The algorithm starts by attaching tz to x.n, and calling that y.  So\n# x.n = y.n at the start.  Then it wants to add a duration k to y, so that [1]\n# becomes true; in effect, we want to solve [2] for k:\n#\n#    (y+k).n - (y+k).o = x.n                      [2]\n#\n# By #1, this is the same as\n#\n#    (y+k).n - ((y+k).s + (y+k).d) = x.n          [3]\n#\n# By #5, (y+k).n = y.n + k, which equals x.n + k because x.n=y.n at the start.\n# Substituting that into [3],\n#\n#    x.n + k - (y+k).s - (y+k).d = x.n; the x.n terms cancel, leaving\n#    k - (y+k).s - (y+k).d = 0; rearranging,\n#    k = (y+k).s - (y+k).d; by #4, (y+k).s == y.s, so\n#    k = y.s - (y+k).d\n#\n# On the RHS, (y+k).d can't be computed directly, but y.s can be, and we\n# approximate k by ignoring the (y+k).d term at first.  Note that k can't be\n# very large, since all offset-returning methods return a duration of magnitude\n# less than 24 hours.  For that reason, if y is firmly in std time, (y+k).d must\n# be 0, so ignoring it has no consequence then.\n#\n# In any case, the new value is\n#\n#     z = y + y.s                                 [4]\n#\n# It's helpful to step back at look at [4] from a higher level:  it's simply\n# mapping from UTC to tz's standard time.\n#\n# At this point, if\n#\n#     z.n - z.o = x.n                             [5]\n#\n# we have an equivalent time, and are almost done.  The insecurity here is\n# at the start of daylight time.  Picture US Eastern for concreteness.  The wall\n# time jumps from 1:59 to 3:00, and wall hours of the form 2:MM don't make good\n# sense then.  The docs ask that an Eastern tzinfo class consider such a time to\n# be EDT (because it's \"after 2\"), which is a redundant spelling of 1:MM EST\n# on the day DST starts.  We want to return the 1:MM EST spelling because that's\n# the only spelling that makes sense on the local wall clock.\n#\n# In fact, if [5] holds at this point, we do have the standard-time spelling,\n# but that takes a bit of proof.  We first prove a stronger result.  What's the\n# difference between the LHS and RHS of [5]?  Let\n#\n#     diff = x.n - (z.n - z.o)                    [6]\n#\n# Now\n#     z.n =                       by [4]\n#     (y + y.s).n =               by #5\n#     y.n + y.s =                 since y.n = x.n\n#     x.n + y.s =                 since z and y are have the same tzinfo member,\n#                                     y.s = z.s by #2\n#     x.n + z.s\n#\n# Plugging that back into [6] gives\n#\n#     diff =\n#     x.n - ((x.n + z.s) - z.o) =     expanding\n#     x.n - x.n - z.s + z.o =         cancelling\n#     - z.s + z.o =                   by #2\n#     z.d\n#\n# So diff = z.d.\n#\n# If [5] is true now, diff = 0, so z.d = 0 too, and we have the standard-time\n# spelling we wanted in the endcase described above.  We're done.  Contrarily,\n# if z.d = 0, then we have a UTC equivalent, and are also done.\n#\n# If [5] is not true now, diff = z.d != 0, and z.d is the offset we need to\n# add to z (in effect, z is in tz's standard time, and we need to shift the\n# local clock into tz's daylight time).\n#\n# Let\n#\n#     z' = z + z.d = z + diff                     [7]\n#\n# and we can again ask whether\n#\n#     z'.n - z'.o = x.n                           [8]\n#\n# If so, we're done.  If not, the tzinfo class is insane, according to the\n# assumptions we've made.  This also requires a bit of proof.  As before, let's\n# compute the difference between the LHS and RHS of [8] (and skipping some of\n# the justifications for the kinds of substitutions we've done several times\n# already):\n#\n#     diff' = x.n - (z'.n - z'.o) =           replacing z'.n via [7]\n#             x.n  - (z.n + diff - z'.o) =    replacing diff via [6]\n#             x.n - (z.n + x.n - (z.n - z.o) - z'.o) =\n#             x.n - z.n - x.n + z.n - z.o + z'.o =    cancel x.n\n#             - z.n + z.n - z.o + z'.o =              cancel z.n\n#             - z.o + z'.o =                      #1 twice\n#             -z.s - z.d + z'.s + z'.d =          z and z' have same tzinfo\n#             z'.d - z.d\n#\n# So z' is UTC-equivalent to x iff z'.d = z.d at this point.  If they are equal,\n# we've found the UTC-equivalent so are done.  In fact, we stop with [7] and\n# return z', not bothering to compute z'.d.\n#\n# How could z.d and z'd differ?  z' = z + z.d [7], so merely moving z' by\n# a dst() offset, and starting *from* a time already in DST (we know z.d != 0),\n# would have to change the result dst() returns:  we start in DST, and moving\n# a little further into it takes us out of DST.\n#\n# There isn't a sane case where this can happen.  The closest it gets is at\n# the end of DST, where there's an hour in UTC with no spelling in a hybrid\n# tzinfo class.  In US Eastern, that's 5:MM UTC = 0:MM EST = 1:MM EDT.  During\n# that hour, on an Eastern clock 1:MM is taken as being in standard time (6:MM\n# UTC) because the docs insist on that, but 0:MM is taken as being in daylight\n# time (4:MM UTC).  There is no local time mapping to 5:MM UTC.  The local\n# clock jumps from 1:59 back to 1:00 again, and repeats the 1:MM hour in\n# standard time.  Since that's what the local clock *does*, we want to map both\n# UTC hours 5:MM and 6:MM to 1:MM Eastern.  The result is ambiguous\n# in local time, but so it goes -- it's the way the local clock works.\n#\n# When x = 5:MM UTC is the input to this algorithm, x.o=0, y.o=-5 and y.d=0,\n# so z=0:MM.  z.d=60 (minutes) then, so [5] doesn't hold and we keep going.\n# z' = z + z.d = 1:MM then, and z'.d=0, and z'.d - z.d = -60 != 0 so [8]\n# (correctly) concludes that z' is not UTC-equivalent to x.\n#\n# Because we know z.d said z was in daylight time (else [5] would have held and\n# we would have stopped then), and we know z.d != z'.d (else [8] would have held\n# and we have stopped then), and there are only 2 possible values dst() can\n# return in Eastern, it follows that z'.d must be 0 (which it is in the example,\n# but the reasoning doesn't depend on the example -- it depends on there being\n# two possible dst() outcomes, one zero and the other non-zero).  Therefore\n# z' must be in standard time, and is the spelling we want in this case.\n#\n# Note again that z' is not UTC-equivalent as far as the hybrid tzinfo class is\n# concerned (because it takes z' as being in standard time rather than the\n# daylight time we intend here), but returning it gives the real-life \"local\n# clock repeats an hour\" behavior when mapping the \"unspellable\" UTC hour into\n# tz.\n#\n# When the input is 6:MM, z=1:MM and z.d=0, and we stop at once, again with\n# the 1:MM standard time spelling we want.\n#\n# So how can this break?  One of the assumptions must be violated.  Two\n# possibilities:\n#\n# 1) [2] effectively says that y.s is invariant across all y belong to a given\n#    time zone.  This isn't true if, for political reasons or continental drift,\n#    a region decides to change its base offset from UTC.\n#\n# 2) There may be versions of \"double daylight\" time where the tail end of\n#    the analysis gives up a step too early.  I haven't thought about that\n#    enough to say.\n#\n# In any case, it's clear that the default fromutc() is strong enough to handle\n# \"almost all\" time zones:  so long as the standard offset is invariant, it\n# doesn't matter if daylight time transition points change from year to year, or\n# if daylight time is skipped in some years; it doesn't matter how large or\n# small dst() may get within its bounds; and it doesn't even matter if some\n# perverse time zone returns a negative dst()).  So a breaking case must be\n# pretty bizarre, and a tzinfo subclass can override fromutc() if it is.\n\ntry:\n    from _datetime import *\nexcept ImportError:\n    pass\nelse:\n    # Clean up unused names\n    del (_DAYNAMES, _DAYS_BEFORE_MONTH, _DAYS_IN_MONTH, _DI100Y, _DI400Y,\n         _DI4Y, _EPOCH, _MAXORDINAL, _MONTHNAMES, _build_struct_time,\n         _check_date_fields, _check_int_field, _check_time_fields,\n         _check_tzinfo_arg, _check_tzname, _check_utc_offset, _cmp, _cmperror,\n         _date_class, _days_before_month, _days_before_year, _days_in_month,\n         _format_time, _is_leap, _isoweek1monday, _math, _ord2ymd,\n         _time, _time_class, _tzinfo_class, _wrap_strftime, _ymd2ord,\n         _divide_and_round)\n    # XXX Since import * above excludes names that start with _,\n    # docstring does not get overwritten. In the future, it may be\n    # appropriate to maintain a single module level docstring and\n    # remove the following line.\n    from _datetime import __doc__\n"
    }
  }
}

2018-05-13 23:56:00 INFO Persistent client received:
{
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri":
        "file:///usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/datetime.py"
    }
  }
}

2018-05-13 23:57:12 INFO Persistent client received:
{
  "jsonrpc": "2.0",
  "id": 4,
  "method": "textDocument/definition",
  "params": {
    "textDocument": { "uri": "file:///Users/kyryu/code/dts/dts/seq.py" },
    "position": { "line": 17, "character": 2 }
  }
}

2018-05-13 23:57:12 INFO Persistent client sends:
{ "jsonrpc": "2.0", "id": 4, "result": [] }

Uncaught exception:
  
  Stack overflow

